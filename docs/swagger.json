{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Money Guard App",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "API documentation for Money Guard App â€” track your finances with ease."
  },
  "servers": [
    {
      "url": "https://money-guard-backend-3e63.onrender.com",
      "description": "Production server"
    },
    {
      "url": "http://localhost:9292",
      "description": "Local development server"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Endpoints for user registration, login, and logout."
    },
    {
      "name": "User",
      "description": "Endpoints for retrieving or updating the authenticated user's profile."
    },
    {
      "name": "Transactions",
      "description": "Endpoints for managing income and expense transactions."
    },
    {
      "name": "Categories",
      "description": "Endpoints for viewing available saving and spending categories."
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register a new user",
        "operationId": "registerUser",
        "description": "This endpoint allows a new user to create an account by providing a name, valid email, and password. The email must be unique. Password must be at least 6 characters and no more than 64. On successful registration, the user receives their name, email, and an authentication token.",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "email",
                  "password"
                ],
                "properties": {
                  "name": {
                    "description": "User's name",
                    "type": "string",
                    "format": "full-name",
                    "minLength": 2,
                    "maxLength": 20,
                    "example": "John Doe"
                  },
                  "email": {
                    "description": "User's email",
                    "type": "string",
                    "format": "email",
                    "maxLength": 64,
                    "example": "johnd@gmail.com"
                  },
                  "password": {
                    "description": "User's password",
                    "type": "string",
                    "format": "password",
                    "minLength": 6,
                    "maxLength": 20,
                    "example": "pCVVJHbCsY57"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully registered",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "type": "object",
                      "$ref": "#/components/schemas/userPublic"
                    },
                    "token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login an existing user",
        "operationId": "loginUser",
        "description": "This endpoint allows an existing user to log in by providing a valid email and password. On success, it returns the user's name, email, and a JWT authentication token.",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "description": "User's email",
                    "type": "string",
                    "format": "email",
                    "maxLength": 64,
                    "example": "johnd@gmail.com"
                  },
                  "password": {
                    "description": "User's password",
                    "type": "string",
                    "format": "password",
                    "minLength": 6,
                    "maxLength": 20,
                    "example": "pCVVJHbCsY57"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully logged in",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "type": "object",
                      "$ref": "#/components/schemas/userPublic"
                    },
                    "token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Log out user",
        "operationId": "logoutUser",
        "description": "Ends user session by invalidating the access token. Requires valid Bearer token in the `Authorization` header.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/verify": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Verify user's email",
        "operationId": "verifyEmail",
        "description": "Verifies a user's email address using a provided verification token.\nThis endpoint is typically accessed by clicking a link sent to the user's email.\n",
        "security": [],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The unique verification token received via email.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "some-random-verification-token-12345"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email successfully verified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Email successfully verified!"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/request-reset-password": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Request password reset",
        "operationId": "requestPasswordReset",
        "description": "Initiates the password reset process. A password reset link will be sent to the provided email address\nif an account with that email exists. This endpoint is designed to give a generic success message\nto prevent email enumeration attacks.\n",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "description": "The email address associated with the account requiring a password reset.",
                    "type": "string",
                    "format": "email",
                    "maxLength": 64,
                    "example": "johnd@gmail.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset request successfully processed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "If an account with that email exists, a password reset link has been sent."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/reset-password": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Reset user's password",
        "operationId": "resetPassword",
        "description": "Resets the user's password using a valid reset token.\nThe token is typically received via a link sent to the user's email.\n",
        "security": [],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The unique password reset token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "some-random-reset-token-67890"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "newPassword"
                ],
                "properties": {
                  "newPassword": {
                    "description": "The new password for the user's account.",
                    "type": "string",
                    "format": "password",
                    "minLength": 6,
                    "maxLength": 20,
                    "example": "NewSecurePassword123!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password has been reset successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Password has been reset successfully."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get current user profile",
        "operationId": "getUserProfile",
        "description": "Retrieve the authenticated user's profile information.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved current user profile.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully retrieved the user profile information!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "name",
                        "email",
                        "balance"
                      ],
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "John Doe"
                        },
                        "email": {
                          "type": "string",
                          "format": "email",
                          "example": "example@mail.com"
                        },
                        "photo": {
                          "type": "string",
                          "format": "uri",
                          "example": "https://res.cloudinary.com/dlejcfotr/image/upload/v1743263889/cl4t7hdyrzxbzxhqeh5i.jpg"
                        },
                        "balance": {
                          "type": "number",
                          "format": "float",
                          "example": 50253.12
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Update current user profile",
        "operationId": "updateUserProfile",
        "description": "Update user profile with provided data.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "The user's full name. Must contain only letters (Latin characters), with a minimum of 3 and a maximum of 20 characters. Special characters and numbers are not allowed. This field is required for registration.\n",
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 20,
                    "example": "John Doe"
                  },
                  "photo": {
                    "description": "Optional URL to the user's profile photo. May be null. If provided, must be a valid image URL $anchor: and can be used to personalize the user's profile page.\n",
                    "type": "string",
                    "format": "uri",
                    "example": "https://res.cloudinary.com/dlejcfotr/image/upload/v1743263889/cl4t7hdyrzxbzxhqeh5i.jpg"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated user profile.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully patched a user profile!"
                    },
                    "data": {
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "John Doe"
                        },
                        "photo": {
                          "type": "string",
                          "format": "uri",
                          "example": "https://res.cloudinary.com/dlejcfotr/image/upload/v1743263889/cl4t7hdyrzxbzxhqeh5i.jpg"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/transactions": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get user's transactions with pagination and sorting",
        "operationId": "getTransactions",
        "description": "Retrieve a paginated and sorted list of transactions for the authenticated user.\nAllows filtering transactions by pages and sorting by date.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "Page number for pagination",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1,
              "example": 1
            }
          },
          {
            "in": "query",
            "name": "perPage",
            "description": "Number of items per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 8,
              "example": 10
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "description": "Sort order of the transactions",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc",
              "example": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved transactions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "transactions",
                    "pageInfo"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully retrieved transactions"
                    },
                    "transactions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/transactionPublic"
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "required": [
                        "page",
                        "perPage",
                        "totalItems",
                        "totalPages",
                        "hasNextPage",
                        "hasPreviousPage"
                      ],
                      "properties": {
                        "page": {
                          "type": "integer",
                          "description": "Current page number",
                          "example": 1
                        },
                        "perPage": {
                          "type": "integer",
                          "description": "Number of items per page",
                          "example": 8
                        },
                        "totalItems": {
                          "type": "integer",
                          "description": "Total number of transactions",
                          "example": 11
                        },
                        "totalPages": {
                          "type": "integer",
                          "description": "Total number of pages",
                          "example": 2
                        },
                        "hasNextPage": {
                          "type": "boolean",
                          "description": "Whether there is a next page",
                          "example": true
                        },
                        "hasPreviousPage": {
                          "type": "boolean",
                          "description": "Whether there is a previous page",
                          "example": false
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Create a new transaction",
        "operationId": "createTransaction",
        "description": "Create a new income or expense transaction by providing the required details in the request body.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "date",
                  "type",
                  "categoryId",
                  "sum"
                ],
                "properties": {
                  "date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date of the transaction in ISO 8601 format",
                    "example": "2025-04-01T00:00:00.000Z"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "income",
                      "expense"
                    ],
                    "default": "expense",
                    "description": "Type of transaction - 'income' for money received or 'expense' for money spent.",
                    "example": "income"
                  },
                  "categoryId": {
                    "type": "string",
                    "pattern": "^[0-9a-fA-F]{24}$",
                    "description": "MongoDB ObjectId of the transaction category.",
                    "example": "680a680d4d3d230f60d30fc1"
                  },
                  "sum": {
                    "type": "number",
                    "format": "float",
                    "minimum": 0.01,
                    "description": "Positive numeric value representing the transaction amount.",
                    "example": 15423.67
                  },
                  "comment": {
                    "type": "string",
                    "description": "Optional note or description for the transaction.",
                    "default": "",
                    "example": "Products in the supermarket"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "transaction",
                    "balance"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Transaction created successfully."
                    },
                    "transaction": {
                      "type": "object",
                      "$ref": "#/components/schemas/transactionPublic"
                    },
                    "balance": {
                      "type": "number",
                      "format": "float",
                      "description": "Updated user balance after the transaction.",
                      "example": 54827.54
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/transactions/{id}": {
      "patch": {
        "tags": [
          "Transactions"
        ],
        "summary": "Update a transaction",
        "operationId": "updateTransaction",
        "description": "Update an existing transaction by its ID with the provided data.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "ID of the transaction to update.",
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "example": "67cece57cf044b5afacf7749"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "categoryId",
                  "sum"
                ],
                "properties": {
                  "date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "ISO 8601 formatted date of the transaction.",
                    "example": "2025-04-01T00:00:00.000Z"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "income",
                      "expense"
                    ],
                    "default": "income",
                    "description": "Type of the transaction.",
                    "example": "income"
                  },
                  "categoryId": {
                    "type": "string",
                    "pattern": "^[0-9a-fA-F]{24}$",
                    "description": "MongoDB ObjectId representing the category.",
                    "example": "680a680d4d3d230f60d30fc1"
                  },
                  "sum": {
                    "type": "number",
                    "format": "float",
                    "minimum": 0.01,
                    "description": "Positive number representing the transaction amount.",
                    "example": 15423.6
                  },
                  "comment": {
                    "type": "string",
                    "description": "Optional comment for the transaction.",
                    "example": "Products in the supermarket",
                    "default": ""
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transaction successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "status",
                    "message",
                    "transaction",
                    "balance"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Transaction successfully updated."
                    },
                    "transaction": {
                      "type": "object",
                      "properties": {
                        "date": {
                          "description": "ISO 8601 formatted date of the transaction.",
                          "type": "string",
                          "format": "date-time",
                          "example": "2025-04-01T00:00:00.000Z"
                        },
                        "type": {
                          "description": "Type of the transaction. Allowed values are 'income' or 'expense'.",
                          "type": "string",
                          "enum": [
                            "income",
                            "expense"
                          ],
                          "example": "income",
                          "default": "income"
                        },
                        "categoryId": {
                          "description": "A valid MongoDB ObjectId representing the category of the transaction.",
                          "type": "string",
                          "pattern": "^[0-9a-fA-F]{24}$",
                          "example": "680a680d4d3d230f60d30fc1"
                        },
                        "sum": {
                          "description": "The amount of the transaction. Must be a positive number.",
                          "type": "number",
                          "format": "float",
                          "example": 15423.6
                        },
                        "comment": {
                          "description": "Optional comment or note related to the transaction. Can be left empty.",
                          "type": "string",
                          "example": "Products in the supermarket",
                          "default": ""
                        }
                      }
                    },
                    "balance": {
                      "type": "number",
                      "format": "float",
                      "description": "Updated user balance after transaction update.",
                      "example": 1000.5
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Transactions"
        ],
        "summary": "Delete a transaction",
        "operationId": "deleteTransaction",
        "description": "Delete a transaction by its unique identifier.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "ID of the transaction to delete.",
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "example": "67cece57cf044b5afacf7749"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction successfully deleted, balance updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "balance"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Transaction successfully deleted."
                    },
                    "balance": {
                      "type": "number",
                      "format": "float",
                      "description": "Updated user balance after deletion.",
                      "example": 1000.5
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/transactions/statistics": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get user's transactions summary by period",
        "operationId": "getSummaryByPeriod",
        "description": "Retrieve a summary of the user's transactions for a specified month and year.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "year",
            "required": true,
            "description": "Four-digit year (e.g. 2024)",
            "schema": {
              "type": "integer",
              "minimum": 2022,
              "example": 2022
            }
          },
          {
            "in": "query",
            "name": "month",
            "required": true,
            "description": "Month number (01-12)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 12,
              "example": 5
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of the transactions summary for the period.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "period",
                    "totalBalance",
                    "periodIncomeOutcome",
                    "totalIncome",
                    "totalExpense",
                    "categoryExpenses",
                    "categoryIncomes",
                    "periodTransactionsSum",
                    "periodTransactionsCount"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found transactions for period ${period}!"
                    },
                    "period": {
                      "type": "string",
                      "description": "The requested period in YYYY-MM format.",
                      "example": "2022-05"
                    },
                    "totalBalance": {
                      "type": "number",
                      "format": "float",
                      "description": "User's current total balance.",
                      "example": 52000
                    },
                    "periodIncomeOutcome": {
                      "type": "number",
                      "format": "float",
                      "description": "Net difference between income and expenses for the selected period.",
                      "example": 15250
                    },
                    "totalIncome": {
                      "type": "number",
                      "format": "float",
                      "description": "Total income for the selected period.",
                      "example": 17000
                    },
                    "totalExpense": {
                      "type": "number",
                      "format": "float",
                      "description": "Total expenses for the selected period.",
                      "example": 1751.45
                    },
                    "categoryExpenses": {
                      "type": "object",
                      "description": "Breakdown of expenses per category, where keys are category names and values are sums.",
                      "additionalProperties": {
                        "type": "number",
                        "format": "float"
                      },
                      "example": {
                        "Products": 350.5,
                        "Car": 1350.5
                      }
                    },
                    "categoryIncomes": {
                      "type": "object",
                      "description": "Breakdown of incomes per category, where keys are category names and values are sums.",
                      "additionalProperties": {
                        "type": "number",
                        "format": "float"
                      },
                      "example": {
                        "Salary": 15000,
                        "Freelance": 2000
                      }
                    },
                    "periodTransactionsSum": {
                      "type": "number",
                      "format": "float",
                      "description": "Sum of all transactions (income + expenses) for the selected period.",
                      "example": 18751
                    },
                    "periodTransactionsCount": {
                      "type": "integer",
                      "description": "Total number of transactions (income and expense) for the selected period.",
                      "example": 10
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/categories": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get all categories",
        "operationId": "getAllCategories",
        "description": "Retrieve a list of all available categories for a user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved all categories.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "categories"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully retrieved all categories."
                    },
                    "categories": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/categories"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "userPublic": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "email"
        ],
        "properties": {
          "_id": {
            "description": "A unique ID for the user in the database.\n",
            "type": "string",
            "format": "objectId",
            "example": "67cd81343b84f810f27e521f"
          },
          "name": {
            "description": "The user's full name.\n",
            "type": "string",
            "minLength": 2,
            "maxLength": 20,
            "example": "John Doe"
          },
          "email": {
            "description": "The user's email address.\n",
            "type": "string",
            "format": "email",
            "maxLength": 64,
            "example": "example@mail.com"
          },
          "balance": {
            "description": "The user's email address.\n",
            "type": "number",
            "format": "float",
            "default": 0,
            "example": 1250.5
          },
          "photo": {
            "description": "Optional URL to the user's profile photo. May be null.\n",
            "type": "string",
            "format": "uri",
            "example": "https://res.cloudinary.com/dlejcfotr/image/upload/v1743263889/cl4t7hdyrzxbzxhqeh5i.jpg"
          },
          "isVerified": {
            "description": "The verification status of the user's account. Defaults to false. Indicates whether the user has confirmed their email address.\n",
            "type": "boolean",
            "default": false,
            "example": true
          },
          "createdAt": {
            "description": "The date and time when the user account was created. Automatically set by the database.\n",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2025-06-10T12:30:00Z"
          },
          "updatedAt": {
            "description": "The date and time of the last update to the user account. Automatically updated by the database when any field changes.\n",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2025-06-11T14:45:00Z"
          }
        }
      },
      "transactionPublic": {
        "type": "object",
        "required": [
          "_id",
          "date",
          "type",
          "categoryId",
          "sum"
        ],
        "properties": {
          "_id": {
            "description": "Unique identifier for the transaction in the database. Automatically generated when the transaction is created.\n",
            "type": "string",
            "format": "objectId",
            "pattern": "^[0-9a-fA-F]{24}$",
            "example": "67cece57cf044b5afacf7749"
          },
          "date": {
            "description": "Date when the transaction occurred, formatted as ISO 8601 datetime string.\n",
            "type": "string",
            "format": "date-time",
            "example": "2025-04-01T00:00:00.000Z"
          },
          "type": {
            "description": "Type of transaction indicating whether it's money coming in or going out.\n'income' represents money received, 'expense' represents money spent.\n",
            "type": "string",
            "enum": [
              "income",
              "expense"
            ],
            "example": "income",
            "default": "expense"
          },
          "categoryId": {
            "description": "Valid MongoDB ObjectId representing the category of this transaction\n(e.g., car, products, salary, investments, etc.)\n",
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "example": "680a680d4d3d230f60d30fc1"
          },
          "sum": {
            "description": "The monetary amount of the transaction. Must be a positive number.\n",
            "type": "number",
            "format": "float",
            "minimum": 0.01,
            "example": 15423.6
          },
          "comment": {
            "description": "Optional note or description about the transaction. Can provide additional\ncontext about the purchase or financial operation.\n",
            "type": "string",
            "example": "Grocery shopping at supermarket",
            "default": ""
          }
        }
      },
      "categories": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "type"
        ],
        "properties": {
          "_id": {
            "description": "Unique identifier for the category. Automatically generated MongoDB ObjectId.",
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "example": "680a680d4d3d230f60d30fc1"
          },
          "name": {
            "description": "Descriptive name of the category (e.g. \"Main expenses\", \"Salary\").",
            "type": "string",
            "example": "Main expenses"
          },
          "type": {
            "description": "Type of the category. Allowed values are 'income' or 'expense'.",
            "type": "string",
            "enum": [
              "income",
              "expense"
            ],
            "default": "expense",
            "example": "expense"
          },
          "createdAt": {
            "description": "The date and time when the category was created. Automatically set by the database.\n",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2025-06-10T12:00:00Z"
          },
          "updatedAt": {
            "description": "The date and time of the last update to the category. Automatically updated by the database when any field changes.\n",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2025-06-11T13:45:00Z"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "responses": {
      "400": {
        "description": "Bad Request error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "BadRequestError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid request data"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "403": {
        "description": "Forbidden error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 403
                },
                "message": {
                  "type": "string",
                  "example": "ForbiddenError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "You do not have permission to access this resource."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Not Found Error",
        "content": {
          "application\\json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "NotFoundError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "409": {
        "description": "Conflict error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 409
                },
                "message": {
                  "type": "string",
                  "example": "ConflictError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Resource conflict occurred"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "Something went wrong"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Server Error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}